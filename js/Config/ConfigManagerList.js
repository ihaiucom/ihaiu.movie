/////////////////////////////////////
// ExportXlsx生成
// http://blog.ihaiu.com/tool-ExportXlsx
/////////////////////////////////////
var configs;
(function (configs) {
    /// 配置读取器列表
    var ConfigManagerList = /** @class */ (function () {
        function ConfigManagerList() {
            // 读取器列表
            this.renders = [];
            this.action = new configs.ActionConfigReader();
            this.activities = new configs.ActivitiesConfigReader();
            this.actor = new configs.ActorConfigReader();
            this.actorAide = new configs.ActorAideConfigReader();
            this.actorAideattach = new configs.ActorAideattachConfigReader();
            this.actorAideIntimacy = new configs.ActorAideIntimacyConfigReader();
            this.actorAideLv = new configs.ActorAideLvConfigReader();
            this.actorAssets = new configs.ActorAssetsConfigReader();
            this.actorAssetsLv = new configs.ActorAssetsLvConfigReader();
            this.actorLevel = new configs.ActorLevelConfigReader();
            this.actorLoyalty = new configs.ActorLoyaltyConfigReader();
            this.actorProficiency = new configs.ActorProficiencyConfigReader();
            this.actorTrain = new configs.ActorTrainConfigReader();
            this.actorTrainLv = new configs.ActorTrainLvConfigReader();
            this.avatar = new configs.AvatarConfigReader();
            this.battleLevel = new configs.BattleLevelConfigReader();
            this.battleShootType = new configs.BattleShootTypeConfigReader();
            this.blockLevel = new configs.BlockLevelConfigReader();
            this.blockRankingList = new configs.BlockRankingListConfigReader();
            this.blockWords = new configs.BlockWordsConfigReader();
            this.blockWordsII = new configs.BlockWordsIIConfigReader();
            this.boxTarget = new configs.BoxTargetConfigReader();
            this.buildingEffect = new configs.BuildingEffectConfigReader();
            this.buildingLevel = new configs.BuildingLevelConfigReader();
            this.business = new configs.BusinessConfigReader();
            this.cinema = new configs.CinemaConfigReader();
            this.city = new configs.CityConfigReader();
            this.cityPopularize = new configs.CityPopularizeConfigReader();
            this.complete = new configs.CompleteConfigReader();
            this.compound = new configs.CompoundConfigReader();
            this.cooperateTask = new configs.CooperateTaskConfigReader();
            this.countActivities = new configs.CountActivitiesConfigReader();
            this.country = new configs.CountryConfigReader();
            this.cupPackage = new configs.CupPackageConfigReader();
            this.dailySign = new configs.DailySignConfigReader();
            this.dailySignTrailer = new configs.DailySignTrailerConfigReader();
            this.dialogue = new configs.DialogueConfigReader();
            this.event = new configs.EventConfigReader();
            this.floor = new configs.FloorConfigReader();
            this.gameLevel = new configs.GameLevelConfigReader();
            this.gameRandomName = new configs.GameRandomNameConfigReader();
            this.gameVersion = new configs.GameVersionConfigReader();
            this.giftPackage = new configs.GiftPackageConfigReader();
            this.global = new configs.GlobalConfigReader();
            this.guidePath = new configs.GuidePathConfigReader();
            this.guidesystem = new configs.GuidesystemConfigReader();
            this.headPortrait = new configs.HeadPortraitConfigReader();
            this.image = new configs.ImageConfigReader();
            this.initialActor = new configs.InitialActorConfigReader();
            this.item = new configs.ItemConfigReader();
            this.languageType = new configs.LanguageTypeConfigReader();
            this.levelGiftPackage = new configs.LevelGiftPackageConfigReader();
            this.loader = new configs.LoaderConfigReader();
            this.loading = new configs.LoadingConfigReader();
            this.mail = new configs.MailConfigReader();
            this.maintask = new configs.MaintaskConfigReader();
            this.meetingGame = new configs.MeetingGameConfigReader();
            this.meetingRewards = new configs.MeetingRewardsConfigReader();
            this.menu = new configs.MenuConfigReader();
            this.menuIndex = new configs.MenuIndexConfigReader();
            this.monthCard = new configs.MonthCardConfigReader();
            this.movieAdaptationMsg = new configs.MovieAdaptationMsgConfigReader();
            this.movieAudienceEvaluation = new configs.MovieAudienceEvaluationConfigReader();
            this.movieDrop = new configs.MovieDropConfigReader();
            this.movieExpect = new configs.MovieExpectConfigReader();
            this.movieLicence = new configs.MovieLicenceConfigReader();
            this.movieMediaVisit = new configs.MovieMediaVisitConfigReader();
            this.movieMidiaEvaluation = new configs.MovieMidiaEvaluationConfigReader();
            this.movieMidiaEvaluationMsg = new configs.MovieMidiaEvaluationMsgConfigReader();
            this.moviePopularize = new configs.MoviePopularizeConfigReader();
            this.movieShootType = new configs.MovieShootTypeConfigReader();
            this.msg = new configs.MsgConfigReader();
            this.msgChat = new configs.MsgChatConfigReader();
            this.msgProtoError = new configs.MsgProtoErrorConfigReader();
            this.npc = new configs.NpcConfigReader();
            this.operationTasks = new configs.OperationTasksConfigReader();
            this.operationTasksScore = new configs.OperationTasksScoreConfigReader();
            this.operationTasksTerms = new configs.OperationTasksTermsConfigReader();
            this.order = new configs.OrderConfigReader();
            this.oscar = new configs.OscarConfigReader();
            this.perform = new configs.PerformConfigReader();
            this.playAct = new configs.PlayActConfigReader();
            this.playerDefault = new configs.PlayerDefaultConfigReader();
            this.playerLevel = new configs.PlayerLevelConfigReader();
            this.popUp = new configs.PopUpConfigReader();
            this.position = new configs.PositionConfigReader();
            this.produce = new configs.ProduceConfigReader();
            this.produceLevel = new configs.ProduceLevelConfigReader();
            this.produceLv = new configs.ProduceLvConfigReader();
            this.produceSouvenir = new configs.ProduceSouvenirConfigReader();
            this.property = new configs.PropertyConfigReader();
            this.randomName = new configs.RandomNameConfigReader();
            this.randomSurname = new configs.RandomSurnameConfigReader();
            this.recharge = new configs.RechargeConfigReader();
            this.roadshow = new configs.RoadshowConfigReader();
            this.secretary = new configs.SecretaryConfigReader();
            this.secretaryGift = new configs.SecretaryGiftConfigReader();
            this.secretaryType = new configs.SecretaryTypeConfigReader();
            this.serverRankingList = new configs.ServerRankingListConfigReader();
            this.settingDefault = new configs.SettingDefaultConfigReader();
            this.shop = new configs.ShopConfigReader();
            this.skill = new configs.SkillConfigReader();
            this.skillEffect = new configs.SkillEffectConfigReader();
            this.skillTrigger = new configs.SkillTriggerConfigReader();
            this.speak = new configs.SpeakConfigReader();
            this.starCon = new configs.StarConConfigReader();
            this.story = new configs.StoryConfigReader();
            this.storyCharacters = new configs.StoryCharactersConfigReader();
            this.storyGoals = new configs.StoryGoalsConfigReader();
            this.storyline = new configs.StorylineConfigReader();
            this.storyRate = new configs.StoryRateConfigReader();
            this.storyRefreshPrice = new configs.StoryRefreshPriceConfigReader();
            this.storyStackItem = new configs.StoryStackItemConfigReader();
            this.storyStackSort = new configs.StoryStackSortConfigReader();
            this.street = new configs.StreetConfigReader();
            this.sysTime = new configs.SysTimeConfigReader();
            this.task = new configs.TaskConfigReader();
            this.test = new configs.TestConfigReader();
            this.turntableComplete = new configs.TurntableCompleteConfigReader();
            this.turntableReward = new configs.TurntableRewardConfigReader();
            this.type = new configs.TypeConfigReader();
            this.unlock = new configs.UnlockConfigReader();
            this.visit = new configs.VisitConfigReader();
            this.weeklyQuest = new configs.WeeklyQuestConfigReader();
            this.welfare = new configs.WelfareConfigReader();
            this.wheelDrop = new configs.WheelDropConfigReader();
            this.writer = new configs.WriterConfigReader();
            this.writerAbility = new configs.WriterAbilityConfigReader();
            this.writerAdaptEffect = new configs.WriterAdaptEffectConfigReader();
            this.writerLevel = new configs.WriterLevelConfigReader();
            this.writerSkill = new configs.WriterSkillConfigReader();
            this.writerStation = new configs.WriterStationConfigReader();
        }
        // 初始化读取器列表
        ConfigManagerList.prototype.initList = function () {
            this.renders.push(this.action);
            this.renders.push(this.activities);
            this.renders.push(this.actor);
            this.renders.push(this.actorAide);
            this.renders.push(this.actorAideattach);
            this.renders.push(this.actorAideIntimacy);
            this.renders.push(this.actorAideLv);
            this.renders.push(this.actorAssets);
            this.renders.push(this.actorAssetsLv);
            this.renders.push(this.actorLevel);
            this.renders.push(this.actorLoyalty);
            this.renders.push(this.actorProficiency);
            this.renders.push(this.actorTrain);
            this.renders.push(this.actorTrainLv);
            this.renders.push(this.avatar);
            this.renders.push(this.battleLevel);
            this.renders.push(this.battleShootType);
            this.renders.push(this.blockLevel);
            this.renders.push(this.blockRankingList);
            this.renders.push(this.blockWords);
            this.renders.push(this.blockWordsII);
            this.renders.push(this.boxTarget);
            this.renders.push(this.buildingEffect);
            this.renders.push(this.buildingLevel);
            this.renders.push(this.business);
            this.renders.push(this.cinema);
            this.renders.push(this.city);
            this.renders.push(this.cityPopularize);
            this.renders.push(this.complete);
            this.renders.push(this.compound);
            this.renders.push(this.cooperateTask);
            this.renders.push(this.countActivities);
            this.renders.push(this.country);
            this.renders.push(this.cupPackage);
            this.renders.push(this.dailySign);
            this.renders.push(this.dailySignTrailer);
            this.renders.push(this.dialogue);
            this.renders.push(this.event);
            this.renders.push(this.floor);
            this.renders.push(this.gameLevel);
            this.renders.push(this.gameRandomName);
            this.renders.push(this.gameVersion);
            this.renders.push(this.giftPackage);
            this.renders.push(this.global);
            this.renders.push(this.guidePath);
            this.renders.push(this.guidesystem);
            this.renders.push(this.headPortrait);
            this.renders.push(this.image);
            this.renders.push(this.initialActor);
            this.renders.push(this.item);
            this.renders.push(this.languageType);
            this.renders.push(this.levelGiftPackage);
            this.renders.push(this.loader);
            this.renders.push(this.loading);
            this.renders.push(this.mail);
            this.renders.push(this.maintask);
            this.renders.push(this.meetingGame);
            this.renders.push(this.meetingRewards);
            this.renders.push(this.menu);
            this.renders.push(this.menuIndex);
            this.renders.push(this.monthCard);
            this.renders.push(this.movieAdaptationMsg);
            this.renders.push(this.movieAudienceEvaluation);
            this.renders.push(this.movieDrop);
            this.renders.push(this.movieExpect);
            this.renders.push(this.movieLicence);
            this.renders.push(this.movieMediaVisit);
            this.renders.push(this.movieMidiaEvaluation);
            this.renders.push(this.movieMidiaEvaluationMsg);
            this.renders.push(this.moviePopularize);
            this.renders.push(this.movieShootType);
            this.renders.push(this.msg);
            this.renders.push(this.msgChat);
            this.renders.push(this.msgProtoError);
            this.renders.push(this.npc);
            this.renders.push(this.operationTasks);
            this.renders.push(this.operationTasksScore);
            this.renders.push(this.operationTasksTerms);
            this.renders.push(this.order);
            this.renders.push(this.oscar);
            this.renders.push(this.perform);
            this.renders.push(this.playAct);
            this.renders.push(this.playerDefault);
            this.renders.push(this.playerLevel);
            this.renders.push(this.popUp);
            this.renders.push(this.position);
            this.renders.push(this.produce);
            this.renders.push(this.produceLevel);
            this.renders.push(this.produceLv);
            this.renders.push(this.produceSouvenir);
            this.renders.push(this.property);
            this.renders.push(this.randomName);
            this.renders.push(this.randomSurname);
            this.renders.push(this.recharge);
            this.renders.push(this.roadshow);
            this.renders.push(this.secretary);
            this.renders.push(this.secretaryGift);
            this.renders.push(this.secretaryType);
            this.renders.push(this.serverRankingList);
            this.renders.push(this.settingDefault);
            this.renders.push(this.shop);
            this.renders.push(this.skill);
            this.renders.push(this.skillEffect);
            this.renders.push(this.skillTrigger);
            this.renders.push(this.speak);
            this.renders.push(this.starCon);
            this.renders.push(this.story);
            this.renders.push(this.storyCharacters);
            this.renders.push(this.storyGoals);
            this.renders.push(this.storyline);
            this.renders.push(this.storyRate);
            this.renders.push(this.storyRefreshPrice);
            this.renders.push(this.storyStackItem);
            this.renders.push(this.storyStackSort);
            this.renders.push(this.street);
            this.renders.push(this.sysTime);
            this.renders.push(this.task);
            this.renders.push(this.test);
            this.renders.push(this.turntableComplete);
            this.renders.push(this.turntableReward);
            this.renders.push(this.type);
            this.renders.push(this.unlock);
            this.renders.push(this.visit);
            this.renders.push(this.weeklyQuest);
            this.renders.push(this.welfare);
            this.renders.push(this.wheelDrop);
            this.renders.push(this.writer);
            this.renders.push(this.writerAbility);
            this.renders.push(this.writerAdaptEffect);
            this.renders.push(this.writerLevel);
            this.renders.push(this.writerSkill);
            this.renders.push(this.writerStation);
        };
        return ConfigManagerList;
    }());
    configs.ConfigManagerList = ConfigManagerList;
})(configs || (configs = {}));
//# sourceMappingURL=ConfigManagerList.js.map